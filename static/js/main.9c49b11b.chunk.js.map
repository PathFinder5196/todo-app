{"version":3,"sources":["todo/index.js","App.js","serviceWorker.js","index.js"],"names":["TodoHome","props","editTodo","id","handleShow","handleClose","setState","show","state","todoList","taskDetail","this","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","Table","striped","bordered","hover","size","responsive","length","map","todoItem","Button","onClick","colSpan","Modal","onHide","Header","closeButton","Title","Body","Footer","variant","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yUAuGeA,E,YAlGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAsBRC,SAAW,SAAAC,GAET,EAAKC,cAzBY,EA4BnBC,YAAc,kBAAM,EAAKC,SAAS,CAAEC,MAAM,KA5BvB,EA6BnBH,WAAa,kBAAM,EAAKE,SAAS,CAAEC,MAAM,KA3BvC,EAAKC,MAAQ,CACXD,MAAM,EACNE,SAAU,CAAC,CACTN,GAAI,EACJO,WAAY,cAEd,CACEP,GAAI,EACJO,WAAY,eAEd,CACEP,GAAI,EACJO,WAAY,cAEd,CACEP,GAAI,EACJO,WAAY,iBAlBC,E,sEAgCT,IAAD,SAEoBC,KAAKH,MAAxBC,EAFD,EAECA,SAAUF,EAFX,EAEWA,KAElB,OACE,6BACE,kBAACK,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,YACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBhB,GAAG,oBAClB,kBAACiB,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUN,KAAK,SAAf,WAIN,kBAACO,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAKC,YAAU,GAChD,+BACE,4BACE,oCAGA,wCAKJ,+BACGnB,GAAYA,EAASoB,OAAS,EAAIpB,EAASqB,KAAI,SAAAC,GAC9C,OACE,4BACE,4BACGA,EAASrB,YAEZ,4BACE,kBAACsB,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAK/B,SAAS6B,EAAS5B,MAA9C,aAKN,4BACE,wBAAI+B,QAAQ,KAAZ,uBAOR,kBAACC,EAAA,EAAD,CAAO5B,KAAMA,EAAM6B,OAAQzB,KAAKN,aAC9B,kBAAC8B,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,uBAEF,kBAACJ,EAAA,EAAMK,KAAP,qDACA,kBAACL,EAAA,EAAMM,OAAP,KACE,kBAACT,EAAA,EAAD,CAAQU,QAAQ,YAAYT,QAAStB,KAAKN,aAA1C,SAGA,kBAAC2B,EAAA,EAAD,CAAQU,QAAQ,UAAUT,QAAStB,KAAKN,aAAxC,uB,GA1FWsC,aCURC,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCIcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c49b11b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Button, Modal, Navbar, Nav } from 'react-bootstrap';\r\n\r\nclass TodoHome extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: false,\r\n      todoList: [{\r\n        id: 1,\r\n        taskDetail: 'First Task'\r\n      },\r\n      {\r\n        id: 2,\r\n        taskDetail: 'Second Task'\r\n      },\r\n      {\r\n        id: 3,\r\n        taskDetail: 'Third Task'\r\n      },\r\n      {\r\n        id: 4,\r\n        taskDetail: 'Fourth Task'\r\n      }]\r\n    }\r\n  }\r\n\r\n  editTodo = id => {\r\n    // alert('Edit record with id : ' + id);\r\n    this.handleShow();\r\n  }\r\n\r\n  handleClose = () => this.setState({ show: false });\r\n  handleShow = () => this.setState({ show: true });\r\n\r\n\r\n  render() {\r\n\r\n    const { todoList, show } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Navbar.Brand href=\"#home\">Todo App</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <Table striped bordered hover size=\"sm\" responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                Task\r\n                            </th>\r\n              <th>\r\n                Action\r\n                            </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {todoList && todoList.length > 0 ? todoList.map(todoItem => {\r\n              return (\r\n                <tr>\r\n                  <td>\r\n                    {todoItem.taskDetail}\r\n                  </td>\r\n                  <td>\r\n                    <Button onClick={() => this.editTodo(todoItem.id)}>Edit</Button>\r\n                  </td>\r\n                </tr>\r\n              )\r\n            }) :\r\n              <tr>\r\n                <td colSpan=\"2\">\r\n                  No Records Found\r\n                            </td>\r\n              </tr>\r\n            }\r\n          </tbody>\r\n        </Table>\r\n        <Modal show={show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Modal heading</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.handleClose}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoHome;","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport TodoHome from './todo';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoHome />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}